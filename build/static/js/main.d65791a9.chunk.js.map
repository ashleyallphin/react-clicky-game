{"version":3,"sources":["assets/images/boosh-monkey-head.png","assets/images/github-logo.svg","components/CharCard/CharCard.js","components/Game/Game.js","components/Navbar/Navbar.js","components/Footer/Footer.js","App.js","registerServiceWorker.js","index.js"],"names":["module","exports","CharCard","props","className","key","id","onClick","handleClicked","clicked","name","src","image","Card","Img","alt","Game","state","winTotal","length","characters","message","submessage","score","highestScore","cardLocation","console","log","forEach","index","setState","sort","Math","random","newScore","newHighestScore","this","Alert","idname","map","Component","Nav","bg","variant","NavbarBrand","href","logo","Footer","target","rel","cursor","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","WebFont","load","google","families","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.d65791a9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/boosh-monkey-head.dc521149.png\";","module.exports = __webpack_public_path__ + \"static/media/github-logo.1f673426.svg\";","import React from 'react';\nimport \"./CharCard.css\";\nimport Card from 'react-bootstrap/Card'\n\nconst CharCard = props => (\n\n\t<div \n\tclassName=\"card-props\" \n\tkey={props.id}\n\tonClick={() => props.handleClicked(props.id, props.clicked, props.name, props.src, props.image)}\n\t>\n\t\t<Card.Img\n\t\tclassName=\"card-image\"  \n\t\tsrc={props.image}\n\t\tid={props.name}\n\t\talt={props.name}\n\t\tname={props.name} />\n\t</div>\n\t\n);\n\nexport default CharCard;","import React, { Component } from 'react';\nimport Alert from 'react-bootstrap/Alert';\nimport CharCard from '../CharCard';\nimport \"./Game.css\";\n\n// character information\nimport characters from \"../../characters.json\";\n\n// Game component\nclass Game extends Component {\n\t\n\t// initial state\n\tstate = {\n\t\twinTotal: this.props.length,\n\t\tcharacters: characters,\n\t\tname: characters.name,\n\t\tmessage: \"Click a character to begin!\",\n\t\tsubmessage: \"Pick all twelve characters without repeating to win the game.\",\n\t\tscore: 0,\n\t\thighestScore: 0,\n\t};\n\n\t// what to show on the page\n\trender() {\n\t\treturn (\n\t\t\t\n\t\t<div className=\"container-fluid\">\n\t\t\t\n\t\t\t{/* game status messages */}\n\t\t\t<div className=\"message text-center\">\n\t\t\t\t<h1>{this.state.message}</h1>\n\t\t\t\t<p>{this.state.submessage}</p>\n\t\t\t</div>\n\n\t\t\t{/* alert for scores */}\n\t\t\t<Alert\n\t\t\tclassName=\"scores-wrapper\">\n\t\t\t\t<div className=\"score current-score\">\n\t\t\t\t{/* current score */}\n\t\t\t\t<p>Current Score</p>\n\t\t\t\t<p className=\"score-number\" idname=\"current-score\">{this.state.score}</p>\n\t\t\t\t</div>\n\t\n\t\t\t\t{/* highest score */}\n\t\t\t\t<div className=\"score highest-score\">\n\t\t\t\t\t<p className=\"score-number\" idname=\"highest-score\">{this.state.highestScore}</p>\n\t\t\t\t\t<p>Highest Score</p>\n\t\t\t\t</div>\n\t\t\t</Alert>\n\n\t\t\t{/* here's where we map our cards props */}\n\t\t\t<div className=\"cards\">\n\t\t\t\t\t{this.state.characters.map(image => (\n\t\t\t\t\t\t<CharCard className=\"card\"\n\t\t\t\t\t\t\t// this is here because: Each child in a list should have a unique \"key\" prop.\n\t\t\t\t\t\t\tkey={image.id}\n\t\t\t\t\t\t\tid={image.id}\n\t\t\t\t\t\t\tname={image.name}\n\t\t\t\t\t\t\tclicked={image.clicked}\n\t\t\t\t\t\t\timage={image.image}\n\t\t\t\t\t\t\thandleClicked={this.handleClicked}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t))}\n\t\t\t</div>\n\t\t\n\t\t</div>\n\t\t);\n\t}\n\n\t// game logic (handleClicked function = states for clicking on cards)\n\thandleClicked = (id, clicked, name) => {\n\t\t\n\t\tconst cardLocation = this.state.characters;\n\t\tconst winTotal = this.state.characters.length;\n\t\tconst score = this.state.score +1 ;\n\n\t\tconsole.log (\"score: \" + score + \"\\nwinTotal :\" + winTotal);\n\n\t\t// if a card is clicked that has already been clicked, return this state:\n\t\t\n\t\tif\n\n\t\t\t( score  === winTotal ) { \n\n\t\t\tconst { highestScore, score } = this.state;\n\t\t\t// increase score by one\n\t\t\tconst newScore = score + 1;\n\t\t\t//if new score is greater than highest score, make the highest score the new socre (called newHighestScore)\n\t\t\tconst newHighestScore = newScore > highestScore ? newScore : highestScore;\n\t\t\tcardLocation.forEach((image, index) => {\n\t\t\t\tcardLocation[index].clicked = false;\n\t\t\t});\n\t\t\treturn this.setState({\n\t\t\t\t// alert with these messages:\n\t\t\t\tmessage: `You won!`,\n\t\t\t\tsubmessage: \"Click a character to play again.\",\n\t\t\t\t// shuffle the cards\n\t\t\t\timage: cardLocation.sort(() => Math.random() - 0.5),\n\t\t\t\t// reset score to 0\n\t\t\t\t// add one to the score\n\t\t\t\tscore: 0,\n\t\t\t\t// set the newHighestScore\n\t\t\t\thighestScore: winTotal,\n\t\t\t\t// set all cards to clicked = false\n\t\t\t})\n\n\t\t} else if (clicked) {\n\t\t\tcardLocation.forEach((image, index) => {\n\t\t\tcardLocation[index].clicked = false;\n\t\t});\n\t\treturn this.setState({\n\t\t\t// alert with these messages:\n\t\t\tmessage: `You already picked ${name}`,\n\t\t\tsubmessage: \"Click another character to begin again.\",\n\t\t\t// shuffle the cards\n\t\t\timage: cardLocation.sort(() => Math.random() - 0.5),\n\t\t\t// reset score to 0\n\t\t\tscore: 0,\n\t\t})\n\t\t}\t\n\t\t//otherwise, return this state:\n\t\telse {\n\t\t\tcardLocation.forEach((image, index) => {\n\t\t\t\tif (id === image.id) {\n\t\t\t\t\tcardLocation[index].clicked = true;\n\t\t\t\t}\n\t\t\t});\n\t\t\tconst { highestScore, score } = this.state;\n\t\t\t// increase score by one\n\t\t\tconst newScore = score + 1;\n\t\t\t//if new score is greater than highest score, make the highest score the new socre (called newHighestScore)\n\t\t\tconst newHighestScore = newScore > highestScore ? newScore : highestScore;\n\t\t\treturn this.setState({\n\t\t\t\t// return these messages\n\t\t\t\tmessage: \"Good choice!\",\n\t\t\t\tsubmessage: \"Pick another character to continue.\",\n\t\t\t\t// shuffle the cards\n\t\t\t\timage: cardLocation.sort(() => Math.random() - 0.5),\n\t\t\t\t// add one to the score\n\t\t\t\tscore: newScore,\n\t\t\t\t// set the newHighestScore\n\t\t\t\thighestScore: newHighestScore\n\t\t\t});\n\t\t}\n\t};\n};\n\n// export as Game\nexport default Game;","import React from 'react';\nimport \"./Navbar.css\";\nimport Navbar from 'react-bootstrap/Navbar';\nimport NavbarBrand from 'react-bootstrap/NavbarBrand';\nimport logo from '../../assets/images/boosh-monkey-head.png'\n\nconst Nav = () => (\n<Navbar\n        className=\"Navbar\"\n        bg=\"dark\"\n        variant=\"dark\">\n        <NavbarBrand href=\"#home\">\n            <img\n                alt=\"Boosh Monkey Head\"\n                src={logo}\n            />{' '}\n            Mighty Boosh Clicky Game\n        </NavbarBrand>\n    </Navbar>\n);\n\nexport default Nav;","import React from 'react';\nimport \"./Footer.css\";\nimport logo from \"../../assets/images/github-logo.svg\"\n\n\nconst Footer = () => (\n    \n    <div\n        className=\"footer\">\n        <a\n        className=\"footer-image\"\n        href=\"https://github.com/ashleyallphin/react-clicky-game\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        cursor=\"pointer\"\n        >\n        <img\n        alt=\"Github Logo\"\n        src={logo}\n        />\n        </a>\n\n    </div>\n);\n\nexport default Footer;","import React from \"react\";\nimport Game from \"./components/Game\";\nimport Nav from \"./components/Navbar\";\nimport Footer from \"./components/Footer\";\nimport \"./App.css\";\n\n\n\nconst App = () => (\n  <div className=\"page\">\n    <Nav />\n    <Game />\n    <Footer />\n  </div>\n);\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\nimport WebFont from 'webfontloader';\n\nWebFont.load({\n  google: {\n    families: ['Orbitron:400', 'Manrope:400', 'Manrope:800', 'sans-serif']\n  }\n});\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}